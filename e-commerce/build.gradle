plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.commerce'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.postgresql:postgresql'

	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'


	// Spring Boot Starter para Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	//Spring Boot Security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//Spring Boot Admin client
	implementation 'de.codecentric:spring-boot-admin-starter-client:3.2.0'

	//Spring boot actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'commons-io:commons-io:2.11.0' // Add this line


	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
	implementation 'com.auth0:java-jwt:4.4.0'
	// or 'io.jsonwebtoken:jjwt-gson:0.12.5' for gson
	/*
      Uncomment this next dependency if you are using:
       - JDK 10 or earlier, and you want to use RSASSA-PSS (PS256, PS384, PS512) signature algorithms.
       - JDK 10 or earlier, and you want to use EdECDH (X25519 or X448) Elliptic Curve Diffie-Hellman encryption.
       - JDK 14 or earlier, and you want to use EdDSA (Ed25519 or Ed448) Elliptic Curve signature algorithms.
      It is unnecessary for these algorithms on JDK 15 or later.
    */
	// runtimeOnly 'org.bouncycastle:bcprov-jdk18on:1.76' // or bcprov-jdk15to18 on JDK 7


}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}



task backupProject(type: Copy) {
	doFirst {
		def backupDir = file('../../copia/backupFolder')
		if (backupDir.exists()) {
			println 'La carpeta de respaldo ya existe. Realizando la copia...'
		} else {
			backupDir.mkdirs()
			println 'La carpeta de respaldo ha sido creada. Realizando la copia...'
		}
	}
	from '.'
	into '../../copia/backupFolder'
	exclude '**/build/**', '**/.gradle/**', '**/.git/**'
	doLast {
		def backupDir = file('../../copia/backupFolder')
		def size = backupDir.listFiles().sum { it.length() } / 1024
		println 'Copia realizada con Exito en la siguiente ruta: ' + backupDir.absolutePath
		println 'El tama√±o total de los archivos copiados es: ' + size + ' KB'
	}
}




tasks.named('test') {
	useJUnitPlatform()
}
